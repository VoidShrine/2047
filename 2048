"""
Clone of 2048 game.
"""
import random
import poc_2048_gui

# Directions, DO NOT MODIFY
UP = 1
DOWN = 2
LEFT = 3
RIGHT = 4

# Offsets for computing tile indices in each direction.
# DO NOT MODIFY this dictionary.
OFFSETS = {UP: (1, 0),
           DOWN: (-1, 0),
           LEFT: (0, 1),
           RIGHT: (0, -1)}

def merge(line):
    """
    Function that merges a single row or column in 2048.
    """
    line1 = []
    line2 = []
    
    for idx in range(len(line)):
        if line[idx] != 0:
            line1.append(line[idx])
    
    for idx in range(len(line1) - 1):
        if line1[idx] == line1[idx + 1]:
            line1[idx] = line1[idx] * 2
            line1[idx + 1] = 0
            
    for idx in range(len(line1)):
        if line1[idx] != 0:
            line2.append(line1[idx])
    
    for idx in range(len(line) - len(line2)):
        line2.append(0)
    return line2

class TwentyFortyEight:
    """
    Class to run the game logic.
    """

    def __init__(self, grid_height, grid_width):
        self._height = grid_height
        self._width = grid_width
        self._motion = {UP: [[(0, iteri) for iteri in range(grid_width)], grid_height],
           DOWN: [[(grid_height - 1, iteri) for iteri in range(grid_width)], grid_height],
           LEFT: [[(iteri, 0) for iteri in range(grid_height)], grid_width],
           RIGHT: [[(iteri, grid_width - 1) for iteri in range(grid_height)], grid_width]}
        self.reset()

    def reset(self):
        """
        Reset the game so the grid is empty except for two
        initial tiles.
        """
        self._grid = [[0 * iteri * iterj for iteri in range(self._height)] for iterj in range(self._width)]
        self.new_tile()
        self.new_tile()

    def __str__(self):
        """
        Return a string representation of the grid for debugging.
        """
        # replace with your code
        return ""

    def get_grid_height(self):
        """
        Get the height of the board.
        """
        return self._height

    def get_grid_width(self):
        """
        Get the width of the board.
        """
        return self._width

    def move(self, direction):
        """
        Move all tiles in the given direction and add
        a new tile if any tiles moved.
        """
        change = 0
        for iteri in self._motion[direction][0]:
            lst = []
            for iterj in range(self._motion[direction][1]):
                lst1 = ([iteri[1] + iterj * OFFSETS[direction][1],
                          iteri[0] + iterj * OFFSETS[direction][0]])
                lst.append(self._grid[lst1[0]][lst1[1]])
            nlst = merge(lst)
            for iterj in range(self._motion[direction][1]):
                lst1 = ([iteri[1] + iterj * OFFSETS[direction][1],
                          iteri[0] + iterj * OFFSETS[direction][0]])
                self.set_tile(lst1[1], lst1[0], nlst[iterj])
            if nlst != lst:
                change = 1
        if change == 1:
            self.new_tile()

    def new_tile(self):
        """
        Create a new tile in a randomly selected empty
        square.  The tile should be 2 90% of the time and
        4 10% of the time.
        """
        occ = 0
        while occ == 0:
            tile = [random.randrange(self._width), random.randrange(self._height)]
            if self._grid[tile[0]][tile[1]] == 0:
                randn = random.randrange(10)
                if randn == 0:
                    value = 4
                else:
                    value = 2
                self._grid[tile[0]][tile[1]] = value
                occ = 1

    def set_tile(self, row, col, value):
        """
        Set the tile at position row, col to have the given value.
        """
        # replace with your code
        self._grid[col][row] = value

    def get_tile(self, row, col):
        """
        Return the value of the tile at position row, col.
        """
        # replace with your code
        return self._grid[col][row]


poc_2048_gui.run_gui(TwentyFortyEight(4, 4))
